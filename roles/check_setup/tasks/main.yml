- name: Make sure we are running correct Ansible Version
  assert:
    that:
      - ansible_version.major >= 2
      - ansible_version.minor >= 6

- name: ensure workshop folder {{ name_prefix }} exists
  file:
    path: "{{ playbook_dir }}/workshops/{{ name_prefix }}"
    state: directory

- name: Check that the provided license exists
  stat:
    path: "{{ playbook_dir }}/tower_license.json"
  register: stat_result

- fail:
    msg: "You need a license located at {{ playbook_dir }}/tower_license.json or to provide a license in variable 'tower_license'"
  when:
    - not stat_result.stat.exists
    - tower_license is undefined

- name: Ensure eula is accepted if posting license
  lineinfile:
    path: "{{ playbook_dir }}/tower_license.json"
    line: '   "eula_accepted": true,'
    insertbefore: '"company_name"'
    state: present
  when:
    - stat_result.stat.exists
    - tower_license is undefined

- name: set tower_license variable if not defined
  set_fact:
    tower_license: "{{ lookup('file', playbook_dir+'/tower_license.json') }}"
  when:
    - stat_result.stat.exists
    - tower_license is undefined

- name: Verify Tower License expiration
  assert:
    that:
      - tower_license.license_date|int > (lookup('pipe','date +%s')|int)
    fail_msg: "Your Tower License is expired"
  when:
    - tower_license.license_date is defined

- name: Verify Tower License expiration
  assert:
    that:
      - (tower_license | from_json)['license_date']|int > (lookup('pipe','date +%s')|int)
    fail_msg: "Your Tower License is expired"
  when:
    - tower_license.license_date is undefined

- name: Check Domain Admin Password Complexity
  assert:
    that:
      - domain_admin_password | length > 7
      - domain_admin_password | regex_search('[A-Z]')
      - domain_admin_password | regex_search('[a-z]')
      - domain_admin_password | regex_search('[0-9]')
    fail_msg: "domain_admin_password does not need password complexity requirements (8+ Chars, Lower Case, Upper Case, Number)"

- name: Check Users Password Complexity
  assert:
    that:
      - users_password | length > 7
      - users_password | regex_search('[A-Z]')
      - users_password | regex_search('[a-z]')
      - users_password | regex_search('[0-9]')
    fail_msg: "users_password does not need password complexity requirements (8+ Chars, Lower Case, Upper Case, Number)"
