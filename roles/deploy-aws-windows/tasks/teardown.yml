---
- name: Get the VPC ID for {{ name_prefix }}
  ec2_vpc_net_facts:
    filters:
      "tag:Name": "{{ name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts

- name: use set fact for easier variables
  set_fact:
    ec2_vpc_id: "{{ vpc_net_facts.vpcs[0].id }}"
  when: vpc_net_facts.vpcs|length > 0

- name: grab route information for {{ ec2_name_prefix }} on {{ ec2_region }}
  ec2_vpc_route_table_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc_id: "{{ ec2_vpc_id }}"
  register: route_table_facts
  when: vpc_net_facts.vpcs|length > 0

- name: grab information about AWS user
  aws_caller_facts:
    region: "{{ ec2_region }}"
  register: whoami

- name: save username of AWS user
  set_fact:
    skylight_user: '{{ whoami.arn.split("/")[-1] }}'

# ----------------------- Destroy Windows Instances -----------------------
- name: Get ec2 Windows instance information
  ec2_instance_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix + '-s' + item + '-database'}}"
  with_sequence: count={{user_count}}
  register: ec2_windows_instances

- name: Terminate Windows Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_windows_instances.results }}"
  when: item.instances.0 is defined and item.instances.0.instance_id is defined

################### Remove Security Groups ###################

- name: Remove Windows security group
  ec2_group:
    name: "{{ name_prefix }}-windowssg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove ssh key pair for workshop {{ name_prefix }}
  ec2_key:
    name: "{{ skylight_user }}-{{ name_prefix }}-key"
    region: "{{ ec2_region }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

# - name: Remove subnet for {{ name_prefix }}-vpc
#   ec2_vpc_subnet:
#     region: "{{ ec2_region }}"
#     vpc_id: "{{ ec2_vpc_id }}"
#     cidr: "{{ ptr_zone_cidr }}"
#     state: absent
#   register: result
#   until: result is success
#   retries: 20
#   delay: 10

- name: Remove Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ ec2_vpc_id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ name_prefix }}-igw"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove subnet route table
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    route_table_id: "{{ item.id }}"
    lookup: id
    state: absent
  with_items: "{{ route_table_facts.route_tables }}"
  register: result
  until: result is success
  retries: 2
  delay: 5
  ignore_errors: true

- name: Remove VPC {{ name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ name_prefix }}-vpc"
    cidr_block: "{{ ptr_zone_cidr }}"
    region: "{{ ec2_region }}"
    state: absent
  register: result
  until: result is success
  retries: 2
  delay: 1
  ignore_errors: true
