################### Build Instances ###################
- name: DomainController | Launch Domain Controller Instance
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ name_prefix }}-dc"
    template: "{{ vmware_windc_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotWindows | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    networks:
    - name: "{{ vCenterPortGroup }}"
      type: dhcp
    customization:
      autologon: True
      orgname: Workshop
      fullname: Workshop
      hostname: windc
      # timezone 20 = Central Standard Time
      # For more info see https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx[msdn.microsoft.com]
      timezone: 20
      password: "{{ domain_admin_password }}"
      runonce:
      - powershell.exe -command "Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private"
      - powershell.exe -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile C:\ConfigureRemotingForAnsible.ps1"
      - powershell.exe -ExecutionPolicy Unrestricted -File C:\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0"
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters' -Name 'DisabledComponents' -PropertyType DWord -Value 0xff"
      - powershell.exe -command "Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"
      - winrm set winrm/config/service/auth @{Basic="true"}
      - winrm set winrm/config/service @{AllowUnencrypted="true"}
      - powershell.exe -command "New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\services\TCPIP6\Parameters -Name DisabledComponents -PropertyType DWord -Value 0xffffffff"
      - powershell.exe -Command "Invoke-WebRequest -Uri '{{ windows_openssh_url }}' -OutFile 'C:\Windows\Temp\OpenSSH-Win64.zip'"
      - powershell.exe -Command "Expand-Archive -LiteralPath 'C:\Windows\Temp\OpenSSH-Win64.zip' -DestinationPath 'C:\Program Files' -ErrorAction SilentlyContinue"
      - powershell.exe -Command "Rename-Item -Path 'C:\Program Files\OpenSSH-Win64' -NewName 'C:\Program Files\OpenSSH' -ErrorAction SilentlyContinue"
      - powershell.exe -ExecutionPolicy Bypass -File "C:\Program Files\OpenSSH\install-sshd.ps1"
      - powershell.exe -Command "New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 -ErrorAction SilentlyContinue"
      - netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22
      - net start sshd
      - powershell.exe -Command "Set-Service sshd -StartupType Automatic -ErrorAction SilentlyContinue"
  with_sequence: count=1
  register: dc_jobs
  async: 7200
  poll: 0

- name: GitLab | Launch Gitlab Instance
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ name_prefix }}-gitlab"
    template: "{{ vmware_gitlab_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotLinux | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    hardware:
      memory_mb: 4096
      num_cpus: 2
    networks:
    - name: "{{ vCenterPortGroup }}"
      type: dhcp
    customization:
      hostname: gitlab
  with_sequence: count=1
  register: gitlab_jobs
  async: 7200
  poll: 0

- name: Docs | Launch Docs Instance
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ name_prefix }}-docs"
    template: "{{ vmware_docs_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotLinux | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    hardware:
      memory_mb: 4096
      num_cpus: 2
    networks:
    - name: "{{ vCenterPortGroup }}"
      type: dhcp
    customization:
      hostname: docs
  with_sequence: count=1
  register: docs_jobs
  async: 7200
  poll: 0

- name: Tower | Launch Tower Instance
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ name_prefix }}-s{{ item }}-tower"
    template: "{{ vmware_tower_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotLinux | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    hardware:
      memory_mb: 4096
      num_cpus: 2
    networks:
    - name: "{{ vCenterPortGroup }}"
      type: dhcp
    customization:
      hostname: "s{{ item }}-tower"
  with_sequence: count={{ user_count }}
  register: tower_jobs
  async: 7200
  poll: 0

- name: Windows | Launch instance 1
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ name_prefix }}-s{{ item }}-win1"
    template: "{{ vmware_windows_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotWindows | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    networks:
    - name: "{{ vCenterPortGroup }}"
      type: dhcp
    customization:
      autologon: True
      orgname: Workshop
      fullname: Workshop
      hostname: "s{{ item }}-win1"
      # timezone 20 = Central Standard Time
      # For more info see https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx[msdn.microsoft.com]
      timezone: 20
      password: "{{ domain_admin_password }}"
      runonce:
      - powershell.exe -command "Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private"
      - powershell.exe -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile C:\ConfigureRemotingForAnsible.ps1"
      - powershell.exe -ExecutionPolicy Unrestricted -File C:\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0"
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters' -Name 'DisabledComponents' -PropertyType DWord -Value 0xff"
      - powershell.exe -command "Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"
      - winrm set winrm/config/service/auth @{Basic="true"}
      - winrm set winrm/config/service @{AllowUnencrypted="true"}
      - powershell.exe -Command "Invoke-WebRequest -Uri '{{ windows_openssh_url }}' -OutFile 'C:\Windows\Temp\OpenSSH-Win64.zip'"
      - powershell.exe -Command "Expand-Archive -LiteralPath 'C:\Windows\Temp\OpenSSH-Win64.zip' -DestinationPath 'C:\Program Files' -ErrorAction SilentlyContinue"
      - powershell.exe -Command "Rename-Item -Path 'C:\Program Files\OpenSSH-Win64' -NewName 'C:\Program Files\OpenSSH' -ErrorAction SilentlyContinue"
      - powershell.exe -ExecutionPolicy Bypass -File "C:\Program Files\OpenSSH\install-sshd.ps1"
      - powershell.exe -Command "New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 -ErrorAction SilentlyContinue"
      - netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22
      - net start sshd
      - powershell.exe -Command "Set-Service sshd -StartupType Automatic -ErrorAction SilentlyContinue"
  with_sequence: count={{user_count}}
  register: windows1_jobs
  async: 7200
  poll: 0

- name: Workstation | Launch instance 1
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ name_prefix }}-s{{ item }}-work"
    template: "{{ vmware_windows_workstation_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotWindows | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    networks:
    - name: "{{ vCenterPortGroup }}"
      type: dhcp
#    - name: "{{ vCenterPortGroupExt }}"
#      type: dhcp
    customization:
      autologon: True
      orgname: Workshop
      fullname: Workshop
      hostname: "s{{ item }}-work"
      # timezone 20 = Central Standard Time
      # For more info see https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx[msdn.microsoft.com]
      timezone: 20
      password: "{{ domain_admin_password }}"
      runonce:
      - powershell.exe -command "Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private"
      - powershell.exe -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile C:\ConfigureRemotingForAnsible.ps1"
      - powershell.exe -ExecutionPolicy Unrestricted -File C:\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0"
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters' -Name 'DisabledComponents' -PropertyType DWord -Value 0xff"
      - powershell.exe -command "Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"
      - winrm set winrm/config/service/auth @{Basic="true"}
      - winrm set winrm/config/service @{AllowUnencrypted="true"}
      - powershell.exe -Command "Invoke-WebRequest -Uri '{{ windows_openssh_url }}' -OutFile 'C:\Windows\Temp\OpenSSH-Win64.zip'"
      - powershell.exe -Command "Expand-Archive -LiteralPath 'C:\Windows\Temp\OpenSSH-Win64.zip' -DestinationPath 'C:\Program Files' -ErrorAction SilentlyContinue"
      - powershell.exe -Command "Rename-Item -Path 'C:\Program Files\OpenSSH-Win64' -NewName 'C:\Program Files\OpenSSH' -ErrorAction SilentlyContinue"
      - powershell.exe -ExecutionPolicy Bypass -File "C:\Program Files\OpenSSH\install-sshd.ps1"
      - powershell.exe -Command "New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 -ErrorAction SilentlyContinue"
      - netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22
      - net start sshd
      - powershell.exe -Command "Set-Service sshd -StartupType Automatic -ErrorAction SilentlyContinue"
  with_sequence: count={{user_count}}
  register: workstation_jobs
  async: 7200
  poll: 0

###################  Wait for jobs to complete ###################

- name: Wait for DC instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: dc_instances
  until: dc_instances.finished
  retries: 300
  with_items: "{{ dc_jobs.results }}"

- name: Wait for Gitlab instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: gitlab_instances
  until: gitlab_instances.finished
  retries: 300
  with_items: "{{ gitlab_jobs.results }}"

- name: Wait for Docs instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: docs_instances
  until: docs_instances.finished
  retries: 300
  with_items: "{{ docs_jobs.results }}"

- name: Wait for tower instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: tower_instances
  until: tower_instances.finished
  retries: 300
  with_items: "{{ tower_jobs.results }}"

- name: Wait for windows instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: windows_instances
  until: windows_instances.finished
  retries: 300
  with_items:
    - "{{ windows1_jobs.results }}"

- name: Wait for Workstation instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: workstation_instances
  until: workstation_instances.finished
  retries: 300
  with_items:
    - "{{ workstation_jobs.results }}"

################### Add hosts ######################

- name: DomainController | Add new instance to host group
  add_host:
    hostname: "windc"
    ansible_host: "{{ item.ipv4  }}"
    ansible_port: "{{ '22' if (windows_ansible_connection is defined and windows_ansible_connection == 'ssh') else '5986' }}"
    ansible_user: "Administrator"
    ansible_password: "{{ domain_admin_password }}"
    ansible_connection: "{{ windows_ansible_connection | default('winrm') }}"
    ansible_shell_type: "cmd"
    private_ip: "{{ item.ipv4 }}"
    ansible_winrm_transport: "basic"
    ansible_winrm_server_cert_validation: "ignore"
    groups: windows_domain_controllers
  with_items: "{{ dc_instances.results | map(attribute='instance') | list }}"

- name: GitLab | Add new instance to host group
  add_host:
    hostname: "gitlab"
    ansible_ssh_host: "{{ item.ipv4 }}"
    ansible_host: "{{ item.ipv4 }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_user: "{{ root_user }}"
    ansible_password: "{{ root_password }}"
    groups: gitlab
  with_items: "{{ gitlab_instances.results | map(attribute='instance') | list }}"

- name: Docs | Add new instance to host group
  add_host:
    hostname: "docs"
    ansible_ssh_host: "{{ item.hw_eth0.ipaddresses[0] }}"
    ansible_host: "{{ item.hw_eth0.ipaddresses[0] }}"
    private_ip: "{{ item.hw_eth0.ipaddresses[0] }}"
    public_ip: "{{ item.hw_eth0.ipaddresses[0] }}"
    ansible_user: "{{ root_user }}"
    ansible_password: "{{ root_password }}"
    groups: docs
  with_items: "{{ docs_instances.results | map(attribute='instance') | list }}"

- name: Tower | Add new instance to host group
  add_host:
    hostname: "{{ item.hw_name | replace(name_prefix + '-', '') }}"
    ansible_ssh_host: "{{ item.ipv4 }}"
    ansible_host: "{{ item.ipv4 }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_user: "{{ root_user }}"
    ansible_password: "{{ root_password }}"
    tower_license: "{{ tower_license }}"
    student: "{{ item.hw_name | replace(name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    groups: tower
  with_items: "{{ tower_instances.results | map(attribute='instance') | list }}"

- name: Windows | Add new instance to host group
  add_host:
    hostname: "{{ item.hw_name | replace(name_prefix + '-', '') }}"
    ansible_host: "{{ item.ipv4  }}"
    student: "{{ item.hw_name | replace(name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_port: "{{ '22' if (windows_ansible_connection is defined and windows_ansible_connection == 'ssh') else '5986' }}"
    ansible_user: "Administrator"
    ansible_password: "{{ domain_admin_password }}"
    ansible_connection: "{{ windows_ansible_connection | default('winrm') }}"
    ansible_shell_type: "cmd"
    ansible_winrm_transport: "basic"
    ansible_winrm_server_cert_validation: "ignore"
    groups: windows
  with_items: "{{ windows_instances.results | map(attribute='instance') | list }}"

- name: Workstation | Add new instance to host group
  add_host:
    hostname: "{{ item.hw_name | replace(name_prefix + '-', '') }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_host: "{{ item.ipv4 }}"
    student: "{{ item.hw_name | replace(name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    ansible_port: "{{ '22' if (windows_ansible_connection is defined and windows_ansible_connection == 'ssh') else '5986' }}"
    ansible_user: "Administrator"
    ansible_password: "{{ domain_admin_password }}"
    ansible_become_password: "{{ users_password }}"
    ansible_connection: "{{ windows_ansible_connection | default('winrm') }}"
    ansible_shell_type: "cmd"
    ansible_winrm_transport: "basic"
    ansible_winrm_server_cert_validation: "ignore"
    groups: windows_workstations
  with_items: "{{ workstation_instances.results | map(attribute='instance') | list }}"

################### Wait for Instances ###################

- name: Tower | Wait for SSH to come up  
  wait_for_connection:  
  delegate_to: "{{ item }}"
  with_items: "{{ groups['tower'] }}"  

- name: GitLab | Wait for SSH to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['gitlab'] }}"  

- name: Docs | Wait for SSH to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['docs'] }}"  

- name: DomainController | Wait for {{ windows_ansible_connection | default('winrm') }} to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['windows_domain_controllers'] }}"  

- name: Windows | Wait for {{ windows_ansible_connection | default('winrm') }} to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['windows'] }}" 

- name: Workstation | Wait for {{ windows_ansible_connection | default('winrm') }} to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['windows_workstations'] }}" 

################### Inventory ###################

- name: Generate instructor inventory
  template:
    src: instructor_inventory.j2
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/instructor_inventory.txt"

- name: Generate student inventories
  template:
    src: instances.txt.j2
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/{{ user_prefix }}{{ item }}-instances.txt"
  with_sequence: count="{{ user_count }}"
