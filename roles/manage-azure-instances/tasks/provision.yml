---
- name: Set resource facts
  set_fact:
    azure_resource_group:  "{{ name_prefix }}-resource"
    azure_storage_account: "{{ (name_prefix + 'storage') | lower | regex_replace('[^0-9a-z]+', '') }}"
    azure_virtual_network: "{{ name_prefix }}-network"
    azure_virtual_subnet:  "{{ (name_prefix + 'subnet')  | lower | regex_replace('[^0-9a-z]+', '') }}"


# Create a resource group
- name: Azure | Create a resource group
  azure_rm_resourcegroup:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    name: "{{ azure_resource_group }}"
    location: "{{ azure_location }}"
    state: present

# Create a virtual network
- name: Azure | Create virtual network
  azure_rm_virtualnetwork:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"  
    name: "{{ azure_virtual_network }}"
    address_prefixes_cidr:
        - "{{ ptr_zone_cidr }}"
    dns_servers:
        - "8.8.8.8"
  register: virtual_network_facts    

# Create a subnet and associate with the virtual network
- name: Create a subnet
  azure_rm_subnet:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ azure_virtual_subnet }}"
    virtual_network_name: "{{ azure_virtual_network }}"
    address_prefix_cidr: "{{ ptr_zone_cidr }}"

################### Build Instances ###################
- name: DomainController | Launch instance
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ name_prefix }}-dc"
    vm_size: "{{ azure_windc_instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    state: present
    os_type: Windows
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    open_ports:
      - 22    # SSH
      - 5986  # WinRM secure
      - 5985
      - 3389  # RDP
    tags:
      Name: "{{ name_prefix }}-dc"
      DNSName: "windc"
      App: AnsibleWorkshop
    image:
      publisher: "{{ azure_win_publisher }}"
      offer: "{{ azure_win_offer }}"
      version: "{{ azure_win_version }}"
      sku: "{{ azure_win_sku }}"
  with_sequence: count=1
  register: dc_jobs
  async: 7200
  poll: 0

- name: Windows | Launch instance 1
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ name_prefix + '-s' + item + '-w1'}}"
    vm_size: "{{ azure_windows_instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    os_type: Windows
    state: present
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    subnet_name: "{{ azure_virtual_subnet }}"
    open_ports:
      - 22    # SSH
      - 80
      - 8080
      - 443 
      - 5986  # WinRM secure
      - 5985  # WinRM
      - 3389  # RDP
    tags:
      Name: "{{ name_prefix + '-s' + item + '-w1'}}"
      DNSName: "{{ 's' + item + '-w1'}}"
      App: AnsibleWorkshop
      Student: "{{ item }}"
      User: "{{ user_prefix + item }}"
    image:
      publisher: "{{ azure_win_publisher }}"
      offer: "{{ azure_win_offer }}"
      version: "{{ azure_win_version }}"
      sku: "{{ azure_win_sku }}"
  with_sequence: count={{ user_count }}
  register: windows1_jobs
  async: 7200
  poll: 0

- name: Workstation | Launch instance
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ name_prefix + '-s' + item + '-wk'}}"
    vm_size: "{{ azure_windows_workstation_instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    os_type: Windows
    state: present
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    subnet_name: "{{ azure_virtual_subnet }}"
    open_ports:
      - 22    # SSH
      - 5986  # WinRM secure
      - 5985  # WinRM
      - 3389  # RDP
    tags:
      Name: "{{ name_prefix + '-s' + item + '-wk'}}"
      DNSName: "{{ 's' + item + '-win1'}}"
      App: AnsibleWorkshop
      Student: "{{ item }}"
      User: "{{ user_prefix + item }}"
    image:
      publisher: "{{ azure_win_publisher }}"
      offer: "{{ azure_win_offer }}"
      version: "{{ azure_win_version }}"
      sku: "{{ azure_win_sku }}"
  with_sequence: count={{ user_count }}
  register: workstation_jobs
  async: 7200
  poll: 0

- name: Launch Tower Instance  
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ name_prefix + '-s' + item + '-tower'}}"
    vm_size: "{{ azure_tower_instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    state: present
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    subnet_name: "{{ azure_virtual_subnet }}"
    open_ports:
      - 22
      - 80
      - 443
    tags:
      Name: "{{ name_prefix + '-s' + item + '-tower'}}"
      DNSName: "{{ 's' + item + '-tower'}}"
      App: AnsibleWorkshop
      Student: "{{ item }}"
      User: "{{ user_prefix + item }}"
    image:
      publisher: "{{ azure_rhel_publisher }}"
      offer: "{{ azure_rhel_offer }}"
      version: "{{ azure_rhel_version }}"
      sku: "{{ azure_rhel_sku }}"
  with_sequence: count={{ user_count }}
  register: tower_jobs
  async: 7200
  poll: 0

- name: GitLab | Launch Instance
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ name_prefix + '-gitlab'}}"
    vm_size: "{{ azure_gitlab_instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    state: present
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    subnet_name: "{{ azure_virtual_subnet }}"
    open_ports:
      - 22
      - 80
      - 8080
      - 443
    tags:
      Name: "{{ name_prefix + '-gitlab'}}"
      DNSName: "gitlab"
      App: AnsibleWorkshop
    image:
      publisher: "{{ azure_rhel_publisher }}"
      offer: "{{ azure_rhel_offer }}"
      version: "{{ azure_rhel_version }}"
      sku: "{{ azure_rhel_sku }}"
  with_sequence: count=1
  register: gitlab_jobs
  async: 7200
  poll: 0

- name: Docs | Launch Instance
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"
    name: "{{ name_prefix + '-docs'}}"
    vm_size: "{{ azure_gitlab_instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    state: present
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    subnet_name: "{{ azure_virtual_subnet }}"
    open_ports:
      - 22
      - 80
      - 8080
      - 443
    tags:
      Name: "{{ name_prefix + '-docs'}}"
      DNSName: "docs"
      App: AnsibleWorkshop
    image:
      publisher: "{{ azure_rhel_publisher }}"
      offer: "{{ azure_rhel_offer }}"
      version: "{{ azure_rhel_version }}"
      sku: "{{ azure_rhel_sku }}"
  with_sequence: count=1
  register: docs_jobs
  async: 7200
  poll: 0

################### Wait for Jobs ###################

- name: Wait for tower instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: tower_instances
  until: tower_instances.finished
  retries: 300
  with_items: "{{ tower_jobs.results }}"

- name: Wait for gitlab instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: gitlab_instances
  until: gitlab_instances.finished
  retries: 300
  with_items: "{{ gitlab_jobs.results }}"

- name: Wait for docs instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: docs_instances
  until: docs_instances.finished
  retries: 300
  with_items: "{{ docs_jobs.results }}"

- name: Wait for DC instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: dc_instances
  until: dc_instances.finished
  retries: 300
  with_items: "{{ dc_jobs.results }}"

- name: Wait for windows instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: windows_instances
  until: windows_instances.finished
  retries: 300
  with_items: 
    - "{{ windows1_jobs.results }}"
  # - "{{ windows2_jobs.results }}"

- name: Workstation | Wait for instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: workstation_instances
  until: workstation_instances.finished
  retries: 300
  with_items: "{{ workstation_jobs.results }}"

################### Custom VM Extension ###################  

- name: DomainController create VM Extension
  azure_rm_virtualmachine_extension:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"    
    name: custom-script
    virtual_machine_name: "{{ item.invocation.module_args.name }}"
    publisher: Microsoft.Compute
    virtual_machine_extension_type: CustomScriptExtension
    type_handler_version: 1.9
    settings: {"commandToExecute": "powershell.exe -ExecutionPolicy ByPass -EncodedCommand {{ lookup('template', 'custom_script.ps1.j2') | b64encode(encoding='utf-16-le') }}"}
    auto_upgrade_minor_version: true
  with_items: "{{ dc_instances.results }}"
  async: 7200
  poll: 0

- name: Workstation create VM Extension
  azure_rm_virtualmachine_extension:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"    
    name: custom-script
    virtual_machine_name: "{{ item.invocation.module_args.name }}"
    publisher: Microsoft.Compute
    virtual_machine_extension_type: CustomScriptExtension
    type_handler_version: 1.9
    settings: {"commandToExecute": "powershell.exe -ExecutionPolicy ByPass -EncodedCommand {{ lookup('template', 'custom_script.ps1.j2') | b64encode(encoding='utf-16-le') }}"}
    auto_upgrade_minor_version: true
  with_items: "{{ workstation_instances.results }}"
  async: 7200
  poll: 0

- name: Windows create VM Extension
  azure_rm_virtualmachine_extension:
    client_id: "{{ azure_client_id }}"
    secret: "{{ azure_secret }}"
    subscription_id: "{{ azure_subscription_id }}"
    tenant: "{{ azure_tenant }}"
    resource_group: "{{ azure_resource_group }}"    
    name: custom-script
    virtual_machine_name: "{{ item.invocation.module_args.name }}"
    publisher: Microsoft.Compute
    virtual_machine_extension_type: CustomScriptExtension
    type_handler_version: 1.9
    settings: {"commandToExecute": "powershell.exe -ExecutionPolicy ByPass -EncodedCommand {{ lookup('template', 'custom_script.ps1.j2') | b64encode(encoding='utf-16-le') }}"}
    auto_upgrade_minor_version: true
  with_items: "{{ windows_instances.results }}"
  async: 7200
  poll: 0

################### Add Hosts ###################

- name: Tower | Add new instance to host group  
  add_host:  
    hostname: "{{ item.invocation.module_args.tags.DNSName }}"
    ansible_host: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"    
    ansible_become_pass: "{{ azure_admin_pass }}"
    private_ip: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"
    student: "{{ item.invocation.module_args.tags.Student | regex_replace('[^0-9]', '') }}"
    tower_license: "{{ tower_license }}"
    groups: tower
  with_items: "{{ tower_instances.results }}"  

- name: GitLab | Add new instance to host group  
  add_host:  
    hostname: "{{ item.invocation.module_args.tags.DNSName }}"
    ansible_host: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"
    ansible_become_pass: "{{ azure_admin_pass }}"
    private_ip: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"
    groups: gitlab
  with_items: "{{ gitlab_instances.results }}"

- name: Docs | Add new instance to host group  
  add_host:  
    hostname: "{{ item.invocation.module_args.tags.DNSName }}"
    ansible_host: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"
    ansible_become_pass: "{{ azure_admin_pass }}" 
    private_ip: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"
    groups: docs
  with_items: "{{ docs_instances.results }}"  

- name: DomainController | Add new instance to host group
  add_host:
    hostname: "{{ item.invocation.module_args.tags.DNSName }}"
    ansible_host: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    ansible_port: "{{ '22' if (windows_ansible_connection is defined and windows_ansible_connection == 'ssh') else '5986' }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"
    ansible_connection: "{{ windows_ansible_connection | default('winrm') }}"
    ansible_shell_type: "cmd"
    private_ip: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"
    ansible_winrm_transport: "credssp"
    ansible_winrm_server_cert_validation: "ignore"
    groups: windows_domain_controllers
  with_items: "{{ dc_instances.results }}"      

- name: Windows | Add new instance to host group
  add_host:
    hostname: "{{ item.invocation.module_args.tags.DNSName }}"
    ansible_host: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    private_ip:  "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"
    ansible_port: "{{ '22' if (windows_ansible_connection is defined and windows_ansible_connection == 'ssh') else '5986' }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"
    ansible_connection: "{{ windows_ansible_connection | default('winrm') }}"
    ansible_shell_type: "cmd"
    ansible_winrm_transport: "credssp"
    ansible_winrm_server_cert_validation: "ignore"
    student: "{{ item.invocation.module_args.tags.Student | regex_replace('[^0-9]', '') }}"
    groups: windows
  with_items: "{{ windows_instances.results }}"  

- name: Workstation | Add new instance to host group
  add_host:
    hostname: "{{ item.invocation.module_args.tags.DNSName }}"
    ansible_host: "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    private_ip:  "{{ item.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"
    ansible_port: "{{ '22' if (windows_ansible_connection is defined and windows_ansible_connection == 'ssh') else '5986' }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"
    ansible_become_password: "{{ users_password }}"
    ansible_connection: "{{ windows_ansible_connection | default('winrm') }}"
    ansible_shell_type: "cmd"
    ansible_winrm_transport: "credssp"
    ansible_winrm_server_cert_validation: "ignore"
    student: "{{ item.invocation.module_args.tags.Student | regex_replace('[^0-9]', '') }}"
    groups: windows_workstations
  with_items: "{{ workstation_instances.results }}"  

################### Wait for Instances ###################

- name: Tower | Wait for SSH to come up  
  wait_for_connection:  
  delegate_to: "{{ item }}"
  with_items: "{{ groups['tower'] }}"  

- name: GitLab | Wait for SSH to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['gitlab'] }}"  

- name: Docs | Wait for SSH to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['docs'] }}"  

- name: DomainController | Wait for {{ windows_ansible_connection | default('winrm') }} to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['windows_domain_controllers'] }}"  

- name: Windows | Wait for {{ windows_ansible_connection | default('winrm') }} to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['windows'] }}" 

- name: Workstation | Wait for {{ windows_ansible_connection | default('winrm') }} to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['windows_workstations'] }}" 

################### Create Inventories ###################

- name: Generate instructor inventory
  template:
    src: instructor_inventory.j2
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/instructor_inventory.txt"

- name: Generate student inventories
  template:
    src: instances.txt.j2
    dest: "{{ playbook_dir }}/workshops/{{ name_prefix }}/{{ user_prefix }}{{ item }}-instances.txt"
  with_sequence: count="{{ user_count }}"

